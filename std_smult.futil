import "primitives/core.futil";
import "primitives/binary_operators.futil";

component main() -> () {
  cells {
    @external left = std_mem_d1(32, 4, 3);
    @external right = std_mem_d1(32, 4, 3);
    @external out_mult = std_mem_d1(32, 4, 3);
    mult = std_smult_pipe(32);

    add = std_add(3);
    idx = std_reg(3);
    lt = std_lt(3);
  }
  wires {
    group init {
      idx.in = 3'd0;
      idx.write_en = 1'd1;
      init[done] = idx.done;
    }
    group incr {
      idx.in = add.out;
      add.left = idx.out;
      add.right = 3'd1;
      idx.write_en = 1'd1;
      incr[done] = idx.done;
    }
    group write_mult {
      out_mult.addr0 = idx.out;
      out_mult.write_data = mult.out;
      out_mult.write_en = 1'd1;
      write_mult[done] = out_mult.done;
    }
    comb group cond {
      lt.left = idx.out;
      lt.right = 3'd4;
    }
    comb group read_mem_idx {
      left.addr0 = idx.out;
      right.addr0 = idx.out;
    }
  }
  control {
    seq {
      init;
      while lt.out with cond {
        seq {
          invoke mult(left = left.read_data, right = right.read_data)() with read_mem_idx;
          par { write_mult; }
          incr;
        }
      }
    }
  }
}
